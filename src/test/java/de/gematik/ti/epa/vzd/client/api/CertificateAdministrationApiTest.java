/*
 * Copyright (c) 2020 gematik GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * I_Directory_Administration
 * REST Schnittstelle zur Pflege der Verzeichniseinträge. Über diese Schnittstelle können Verzeichniseinträge inklusive Zertifikaten erzeugt, aktualisiert und gelöscht werden. Die Administration von Fachdaten erfolgt über Schnittstelle I_Directory_Application_Maintenance und wird durch die Fachanwendungen durchgeführt. Lesender Zugriff auf die Fachdaten ist mit Operation getDirectoryEntries in vorliegender Schnittstelle möglich.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.gematik.ti.epa.vzd.client.api;

import de.gematik.ti.epa.vzd.client.invoker.ApiException;
import de.gematik.ti.epa.vzd.client.model.DistinguishedName;
import de.gematik.ti.epa.vzd.client.model.Error;
import de.gematik.ti.epa.vzd.client.model.UserCertificate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificateAdministrationApi
 */
@Ignore
public class CertificateAdministrationApiTest {

    private final CertificateAdministrationApi api = new CertificateAdministrationApi();

    
    /**
     * Der Zertifikatseintrag wird im Verzeichnisdienst hinzugefügt und ist logisch über dn.uid mit dem übergeordneten Verzeichniseintrag verknüpft.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDirectoryEntryCertificateTest() throws ApiException {
        String uid = null;
        UserCertificate userCertificate = null;
        DistinguishedName response = api.addDirectoryEntryCertificate(uid, userCertificate);

        // TODO: test validations
    }
    
    /**
     * Zertifikatseintrag löschen Dem Verzeichniseintrag muss immer mindestens ein Zertifikat zugeordnet sein. Wenn nach dem Löschen kein Zertifikat mehr dem Verzeichniseintrag zugeordnet wäre, muss die delete Operation abgelehnt werden.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDirectoryEntryCertificateTest() throws ApiException {
        String uid = null;
        String certificateEntryID = null;
        api.deleteDirectoryEntryCertificate(uid, certificateEntryID);

        // TODO: test validations
    }
    
    /**
     * Der Zertifikatseintrag wird mit den übergebenen Daten aktualisiert.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyDirectoryEntryCertificateTest() throws ApiException {
        String uid = null;
        String certificateEntryID = null;
        UserCertificate userCertificate = null;
        UserCertificate response = api.modifyDirectoryEntryCertificate(uid, certificateEntryID, userCertificate);

        // TODO: test validations
    }
    
    /**
     * Zertifikat lesen
     *
     * Liefert alle Zertifikate, die dem Filter (siehe &#39;parameters&#39;) entsprechen.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readDirectoryCertificatesTest() throws ApiException {
        String uid = null;
        String certificateEntryID = null;
        String entryType = null;
        String telematikID = null;
        String professionOID = null;
        String usage = null;
        List<UserCertificate> response = api.readDirectoryCertificates(uid, certificateEntryID, entryType, telematikID, professionOID, usage);

        // TODO: test validations
    }
    
}
