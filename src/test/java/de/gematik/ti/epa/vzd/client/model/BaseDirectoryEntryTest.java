/*
 * I_Directory_Administration
 * REST Schnittstelle zur Pflege der Verzeichniseinträge. Über diese Schnittstelle können Verzeichniseinträge inklusive Zertifikaten erzeugt, aktualisiert und gelöscht werden. Die Administration von Fachdaten erfolgt über Schnittstelle I_Directory_Application_Maintenance und wird durch die Fachanwendungen durchgeführt. Lesender Zugriff auf die Fachdaten ist mit Operation getDirectoryEntries in vorliegender Schnittstelle möglich.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.gematik.ti.epa.vzd.client.model;

import org.junit.Test;


/**
 * Model tests for BaseDirectoryEntry
 */
public class BaseDirectoryEntryTest {

    private final BaseDirectoryEntry model = new BaseDirectoryEntry();

    /**
     * Model tests for BaseDirectoryEntry
     */
    @Test
    public void testBaseDirectoryEntry() {
        // TODO: test BaseDirectoryEntry
    }

    /**
     * Test the property 'dn'
     */
    @Test
    public void dnTest() {
        // TODO: test dn
    }

    /**
     * Test the property 'givenName'
     */
    @Test
    public void givenNameTest() {
        // TODO: test givenName
    }

    /**
     * Test the property 'sn'
     */
    @Test
    public void snTest() {
        // TODO: test sn
    }

    /**
     * Test the property 'cn'
     */
    @Test
    public void cnTest() {
        // TODO: test cn
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    public void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'streetAddress'
     */
    @Test
    public void streetAddressTest() {
        // TODO: test streetAddress
    }

    /**
     * Test the property 'postalCode'
     */
    @Test
    public void postalCodeTest() {
        // TODO: test postalCode
    }

    /**
     * Test the property 'localityName'
     */
    @Test
    public void localityNameTest() {
        // TODO: test localityName
    }

    /**
     * Test the property 'stateOrProvienceName'
     */
    @Test
    public void stateOrProvienceNameTest() {
        // TODO: test stateOrProvienceName
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'organization'
     */
    @Test
    public void organizationTest() {
        // TODO: test organization
    }

    /**
     * Test the property 'otherName'
     */
    @Test
    public void otherNameTest() {
        // TODO: test otherName
    }

    /**
     * Test the property 'specialization'
     */
    @Test
    public void specializationTest() {
        // TODO: test specialization
    }

    /**
     * Test the property 'domainID'
     */
    @Test
    public void domainIDTest() {
        // TODO: test domainID
    }

    /**
     * Test the property 'personalEntry'
     */
    @Test
    public void personalEntryTest() {
        // TODO: test personalEntry
    }

    /**
     * Test the property 'dataFromAuthority'
     */
    @Test
    public void dataFromAuthorityTest() {
        // TODO: test dataFromAuthority
    }

}
