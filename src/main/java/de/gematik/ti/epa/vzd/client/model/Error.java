/*
 * Copyright (c) 2020 gematik GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * I_Directory_Administration
 * REST Schnittstelle zur Pflege der Verzeichniseinträge. Über diese Schnittstelle können Verzeichniseinträge inklusive Zertifikaten erzeugt, aktualisiert und gelöscht werden. Die Administration von Fachdaten erfolgt über Schnittstelle I_Directory_Application_Maintenance und wird durch die Fachanwendungen durchgeführt. Lesender Zugriff auf die Fachdaten ist mit Operation getDirectoryEntries in vorliegender Schnittstelle möglich.
 *
 * The version of the OpenAPI document: 1.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.gematik.ti.epa.vzd.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Error
 */

public class Error {

    public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "attributeName";
    @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
    private String attributeName;

    public static final String SERIALIZED_NAME_ATTRIBUTE_ERROR = "attributeError";
    @SerializedName(SERIALIZED_NAME_ATTRIBUTE_ERROR)
    private String attributeError;


    public Error attributeName(String attributeName) {

        this.attributeName = attributeName;
        return this;
    }

    /**
     * Name des Attributs, in dem ein Fehler erkannt wurde
     *
     * @return attributeName
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Name des Attributs, in dem ein Fehler erkannt wurde")

    public String getAttributeName() {
        return attributeName;
    }


    public void setAttributeName(String attributeName) {
        this.attributeName = attributeName;
    }


    public Error attributeError(String attributeError) {

        this.attributeError = attributeError;
        return this;
    }

    /**
     * Beschreibung des erkannten Fehlers
     *
     * @return attributeError
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Beschreibung des erkannten Fehlers")

    public String getAttributeError() {
        return attributeError;
    }


    public void setAttributeError(String attributeError) {
        this.attributeError = attributeError;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Error error = (Error) o;
        return Objects.equals(this.attributeName, error.attributeName) &&
            Objects.equals(this.attributeError, error.attributeError);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attributeName, attributeError);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Error {\n");
        sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
        sb.append("    attributeError: ").append(toIndentedString(attributeError)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

