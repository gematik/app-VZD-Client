/*
 * Copyright (c) 2020 gematik GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * I_Directory_Administration
 * REST Schnittstelle zur Pflege der Verzeichniseinträge. Über diese Schnittstelle können Verzeichniseinträge inklusive Zertifikaten erzeugt, aktualisiert und gelöscht werden. Die Administration von Fachdaten erfolgt über Schnittstelle I_Directory_Application_Maintenance und wird durch die Fachanwendungen durchgeführt. Lesender Zugriff auf die Fachdaten ist mit Operation getDirectoryEntries in vorliegender Schnittstelle möglich.
 *
 * The version of the OpenAPI document: 1.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.gematik.ti.epa.vzd.client.invoker;

import java.util.List;
import java.util.Map;

/**
 * Callback for asynchronous API call.
 *
 * @param <T> The return type
 */
public interface ApiCallback<T> {

  /**
   * This is called when the API call fails.
   *
   * @param e               The exception causing the failure
   * @param statusCode      Status code of the response if available, otherwise it would be 0
   * @param responseHeaders Headers of the response if available, otherwise it would be null
   */
  void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders);

  /**
   * This is called when the API call succeeded.
   *
   * @param result          The result deserialized from response
   * @param statusCode      Status code of the response
   * @param responseHeaders Headers of the response
   */
  void onSuccess(T result, int statusCode, Map<String, List<String>> responseHeaders);

  /**
   * This is called when the API upload processing.
   *
   * @param bytesWritten  bytes Written
   * @param contentLength content length of request body
   * @param done          write end
   */
  void onUploadProgress(long bytesWritten, long contentLength, boolean done);

  /**
   * This is called when the API downlond processing.
   *
   * @param bytesRead     bytes Read
   * @param contentLength content lenngth of the response
   * @param done          Read end
   */
  void onDownloadProgress(long bytesRead, long contentLength, boolean done);
}
